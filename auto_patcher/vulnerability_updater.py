import os
import json
import docker
import logging
from typing import Dict, Tuple, Optional
from pathlib import Path
import time

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class VulnerabilityUpdater:
    def __init__(self):
        self.docker_client = docker.from_env()

    def _update_dependency(self, project_path: str, package_name: str, new_version: str) -> bool:
        """Update dependency in the appropriate file."""
        project_path = Path(project_path)
        
        # Update Node.js dependency
        if (project_path / "package.json").exists():
            with open(project_path / "package.json") as f:
                pkg_data = json.load(f)
            
            if package_name in pkg_data.get("dependencies", {}):
                pkg_data["dependencies"][package_name] = new_version
                with open(project_path / "package.json", "w") as f:
                    json.dump(pkg_data, f, indent=2)
                return True
                
        # Update Python dependency
        elif (project_path / "requirements.txt").exists():
            with open(project_path / "requirements.txt") as f:
                lines = f.readlines()
            
            updated = False
            with open(project_path / "requirements.txt", "w") as f:
                for line in lines:
                    if line.startswith(f"{package_name}=="):
                        f.write(f"{package_name}=={new_version}\n")
                        updated = True
                    else:
                        f.write(line)
            return updated
            
        return False

    def _run_tests(self, container) -> bool:
        """Run tests in the container."""
        try:
            # Start the application
            container.start()
            
            # Wait for application to be ready
            time.sleep(5)
            
            # Run tests based on project type
            if container.exec_run("test -f package.json").exit_code == 0:
                # Node.js project
                exit_code, _ = container.exec_run("npm test")
            else:
                # Python project
                exit_code, _ = container.exec_run("python -m pytest")
                
            return exit_code == 0
        except Exception as e:
            logger.error(f"Test execution failed: {e}")
            return False
        finally:
            container.stop()

    def _run_smoke_tests(self, container) -> bool:
        """Run smoke tests to verify basic functionality."""
        try:
            # Start the application
            container.start()
            
            # Wait for application to be ready
            time.sleep(5)
            
            # Run basic health check
            exit_code, _ = container.exec_run("curl -f http://localhost:3000/health")
            return exit_code == 0
        except Exception as e:
            logger.error(f"Smoke test failed: {e}")
            return False
        finally:
            container.stop()

    def update_vulnerability(self, project_path: str, package_name: str, new_version: str) -> Tuple[bool, str, Dict]:
        """
        Update a vulnerable package and test the changes.
        Returns (success, message, report)
        """
        report = {
            "package_name": package_name,
            "new_version": new_version,
            "tests_passed": False,
            "smoke_tests_passed": False,
            "build_successful": False,
            "error": None
        }

        try:
            # Update dependency
            if not self._update_dependency(project_path, package_name, new_version):
                report["error"] = "Failed to update dependency"
                return False, "Failed to update dependency", report

            # Build Docker image
            try:
                image, _ = self.docker_client.images.build(
                    path=project_path,
                    dockerfile="Dockerfile",
                    rm=True
                )
                report["build_successful"] = True
            except Exception as e:
                report["error"] = f"Build failed: {str(e)}"
                return False, f"Build failed: {str(e)}", report

            # Create container
            container = self.docker_client.containers.create(
                image.id,
                detach=True
            )

            # Run tests
            report["tests_passed"] = self._run_tests(container)
            report["smoke_tests_passed"] = self._run_smoke_tests(container)

            # Cleanup
            container.remove()
            self.docker_client.images.remove(image.id)

            if report["tests_passed"] and report["smoke_tests_passed"]:
                return True, f"Successfully updated {package_name} to {new_version}", report
            else:
                return False, "Update failed validation tests", report

        except Exception as e:
            report["error"] = str(e)
            return False, f"Error during update: {str(e)}", report 